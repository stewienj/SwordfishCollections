@page "/counter"
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Timers
@rendermode InteractiveServer

<PageTitle>Promotion Grid</PageTitle>

<h1>Promotion Grid Example</h1>

<QuickGrid Items="people">
    <PropertyColumn Property="@(p => p.PersonId)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
    <PropertyColumn Property="@(p => p.PromotionDate)" Format="yyyy-MM-dd" Sortable="true" />
</QuickGrid>

<button @onclick="AddItem">Add Item</button>

@code {
    private Timer _timer = new Timer(2000); // 2 seconds
    private int _i = 0;
    private record Person(int PersonId, string Name, DateOnly PromotionDate);

    private List<Person> _people =
        [
        new Person(10895, "Jean Martin", new DateOnly(1985, 3, 16)),
        new Person(10944, "António Langa", new DateOnly(1991, 12, 1)),
        new Person(11203, "Julie Smith", new DateOnly(1958, 10, 10)),
        new Person(11205, "Nur Sari", new DateOnly(1922, 4, 27)),
        new Person(11898, "Jose Hernandez", new DateOnly(2011, 5, 3)),
        new Person(12130, "Kenji Sato", new DateOnly(2004, 1, 9)),
    ];


    private void AddItem()
    {
        _people.Add(new Person(10895 + (++_i), "Jean Martin", new DateOnly(1985 + _i, 3, 16)));
    }

    private IQueryable<Person> people => _people.AsQueryable();

    protected override void OnInitialized()
    {
        // Set up the timer
        _timer.Elapsed += async (sender, e) => await UpdateData();
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private async Task UpdateData()
    {
        // Simulate data fetching
        await InvokeAsync(() =>
        {
            _people.Add(new Person(10895 + (++_i), "Jean Martin", new DateOnly(1985 + _i, 3, 16)));
            StateHasChanged(); // Refresh UI
        });
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}